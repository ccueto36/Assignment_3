

BINARY SEARCH TREES

*A Binary Tree is a data structure made up of elements called nodes, usually containing a node called root as its main node.

*Binary Trees contain left and right nodes, which are usually called subtrees. The nodes to the left and to the right of each node (if any) are 
called the children of that node. Consequently, that node is the parent of its left and right children.
(********ILLUSTRATE PARENT-CHILD RELATIONSHIP WITH AN EXAMPLE BST ON THE LEFT********)

----Question # 1
Which of the nodes below is the child of node A?
	A. Node B
	B. Node C
	C. Node D
	D. Node E
 
*A binary search tree(BST) is a special type of Binary Tree that has certain conditions:
	*All nodes stored in the left subtree of a node K must be of value less than or equal to K.
	*All nodes stored in the right subtree of a node K must be of value more than K.
(*******TREE PRINTED ON THE LEFT SHOULD CONTAIN A CORRECT BST AND AN INCORRECT ONE*******)

*If BST's are printed using a inorder traversal technique, the printout will result in a lowest to highest printout.

----Question # 2
Is the tree in Figure 1.1 (shown on the left) a Binary Search Tree? (***PRINOUT OF A RANDOM BST ON THE LEFT, USER DETERMINES CORRECTEDNESS***)
	A. True
	B. False

*A node which has no children of its own is said to be a "leaf" node. 

----Question # 3
Determine which of the nodes in Fig 1.3 (shown on the left) is a leaf node? (***PRINOUT OF BST WITH LEAF NODES***)
	A. Node A
	B. Node B
	C. Node C
	D. Node D
	
*They call the length of the path from the root of the tree to a node M is called the "depth" of Node M. Consequently, the "height" of a tree is depth + 1 of the deepest node in the tree.

----Question # 4
What is the depth of Node B in the tree in Fig 1.4 (shown on the left)? (***PRINTOUT OF BST WITH NODE B AS ONE OF THE NODES***)
A. 4
B. 3
C. 1
D. 2

----Question # 5
What is the height of the tree in Fig 1.4? (***KEEP SAME TREE AS QUESTION ABOVE***)
A. 4
B. 3
C. 5
D. 2

*Unlike Linked List data structures, Trees cannot be traversed in a regular fashion. Tree traversals are usually most efficient through the use of recursion. There are three types of recursion traversals which trees use most, depending on the situation. There are in-order traveral, pre-order traversal, and post-order traversal. 
*In-order traversal first traverses the left subtree by recursively calling the in-order function, then displays the data of the root element, and finally traverses the right subtree by recursively calling the in-order function again.
*Pre-order traversal first displays the data, then traverses the left subtree and finally traverses the right subtree. 
*Post-order traversal traverses the left subtree, traverses the right subtree, and finally prints out the data.

---Question # 6
Which of the Java code snippets to the left on Fig 1.5 make use of the in-order tree traversal technique?
(****Answer choices will contain small Java code for each type of traversal, make one of them a linked list traversal and the correct answer****)
A.
B.
C.
D.

*A tree is said to be "balanced" when it is not lopsided, meaning the deepest leaf node's depth is no greater than 1 more than the shallowest leaf node's depth. On the other hand, an "unbalanced" tree is lopsided, meaning some leaf nodes have high depths while other leaf nodes have low depths, the most extreme case of an unbalanced tree is a linked list.

----Question # 7
Is the tree shown on Fig 1.6 a balanced tree?
A. True
B. False

*When a tree is unbalanced, its traversal worst case scenario becomes O(n) complexity. However, when the tree is balanced, the worst case scenario becomes an efficient O(log n) complexity. In order to keep trees balanced after every insertion or  deletion, we use AVL trees to perform this. AVL trees use "rotations" in order to keep themselves balanced after every tree update. If the level of a subtree is more than 1 on the left than on the right, we perform a left rotation to balance the tree. Consequently, we perform a right rotation if the level of the subtree is more than 1 on the right node. When rotating the tree, we switch the positions of the parent and the child nodes and keep the search order of the tree. 
(*****SHOW AN UNBALANCED TREE AND THEN AFTERWARDS A TREE THAT HAS BEEN ROTATED TO BALANCE IT OUT****)

----Question # 8
What is the balanced version of the unbalanced tree to the left in Fig 1.7?
(**SHOW DIFFERENT TREES AND A CORRECT VERSION**)
A.
B.
C.
D.


















